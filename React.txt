---------React'ın 3 ana bileşeni---------
1- Component : bir yapın tanımlanır tekrar tekrar kullanılır.
2- Props : componentler arası veri taşıma işlemi.
3- State Management : Verileri tutup saklama (Context Api , Redux toolkit)

ReactJS (JSX) => JS + HTML



--------------Proje Çalıştırma--------------
-----ESKİ YÖNTEM-----
npx create-react-app uygulama_adı
cd uygulama_adı
npm start

Hata Çıkarsa
npm install --save-dev web-vitals

-----YENİ YÖNTEM-----
Vite ile oluşturma
https://vite.dev/guide/

C:\Users\xsaozdemir\WebProjectWorkspace\>npm create vite@latest
- enter project name
- select React
- select JavaScript

        Vite sürümü seçmek için=> npm create vite@5.4

cd project name
npm install
npm run dev

stop: ctrl + c

------------------------Eklentiler------------------------
Modern React Snippets
    rfce: react functional component


ES Lint Kapatma .eslintrc.cjs dosyasına aşağıdaki satır eklenir
    "rules": {
        "no-unused-vars": "off"
    }

--------------Otak Sistem Bileşenleri--------------
nodejs  : 16.14.0
npm     : 8.3.1
vite    : 5.4.11 (5.4.8)


---React Proje Mimarisi---
node_modules    : paket ve proje için gerekenler (npm install ile indi)
public          :
src             : Kaynak dosyaları
    App.css         : App.jsx içinde çağrıldı.
    eslint.config.js: Kod standartlarını kontrol ediyor.
    package.json    : çalıştırma için gereken kütüphaneler ve scriptler
                    (Örnek= proje dizininde iken -> npm install react-icons)
    index.html      : id si root olan bir div oluşturur.
    main.jsx        : id si root olan elementi seçer ve o div içinde App componentini render eder.
    App.jsx         : main.jsx'de render edilmesi istenen componentin içeriğidir.
-----------------------
---COMPONENT KAVRAMI---
-----------------------
    Component: JS de kullanılan fonksiyondur. 2 farklı kullanımı vardır.
                1- Functional component : Halen kullanılıyor.
                2- Class component : Eskide kaldığı için tercih edilmiyor.
        return: JS kodlarından sonra bir html kodu döndürüyor.

    EXPORT yöntemleri
    export          : Bir componentin sadece bir parçasını dışarıya göndermek istediğimizde kullanılır.

    export default  : bir componenti olduğu gibi dışarıya göndermek istediğinizde kullanılır.
-------------------
---PROPS KAVRAMI---
-------------------
    Bir veriyi alıp child componente aktarması için kullanılır.

-------------------
---STATE KAVRAMI---
-------------------
    Verileri tutmak için kullanılan hooks dur. Örnek olarak java'da
    String TCNO = "12345678901";
    Bu ifadenin reactdaki karşılığıdır.

    Bir state'in değeri set metodu ile değiştirilirse component yeniden render edilir.

-------------------
---EFFECT KAVRAMI---
-------------------
    3 farklı tipte kullanımı vardır.
        1- Her render işleminde çalış.
        2- Sadece sayfa ilk defa render edilirken çalış.
        3- Bir veya birden fazla state e bağımlı ve sayfa ilk defa render edildiğinde çalış.

 ÖNEMLİ NOTLAR
 1- return içinde bir css kodu yazılacaksa iki adet {} içine yazılır.
    Ör. <div style={{backgroundColor: "orange"}}</div>
 2- return içinde 1 parent component olur. 2 adet yazılamaz.
 3- Fragmet: <></>
 4- Bir state'in değeri set metodu ile değiştirilirse component yeniden render edilir.

 -------------------
 --------API--------
 -------------------
 Birden fazla arayüze hizmet verme için yazılmış backend katmanı
    1- SOAP: xml tabanlı, yavaş ve konfigürasyonu zor. Eskiden çok tercih edilen yöntem.
    2- REST: JSON tabanlı, hızlı, popüler ve daha fazla kaynağa sahip

React ile bir API ye istek atma yöntemleri
        Makale Linki=> https://builtin.com/software-engineering-perspectives/react-api
    1- XNLHttpRequest (Çok eski yöntem)
    2- Fetch API (Promiseler ile çaışan api)
    3- Axios (* En çok tercih edilen güncel yönem)
            npm install axios

Fake API için yetenekler ve kurulumlar
     1- Fake Rest API
        JSON PLaceHolder => https://jsonplaceholder.typicode.com/
     2- JSON Server
            Kurulum     : npm install json-server (npm install json-server@0.17.4)
            Kontrol     : json-server --version
            DB Oluşturma: src dizini altına db.json adında dosya oluşturulur.
            Çalıştırma  : json-server --watch .\src\db.json --port 4000